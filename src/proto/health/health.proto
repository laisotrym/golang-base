syntax = "proto3";

package app.safeweb.v1;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

option go_package = "safeweb.app/rpc/health";

message HealthCheckRequest {
  string service = 1;
}

// message HealthCheckResponse {
//   enum ServingStatus {
//     UNKNOWN = 0;
//     SERVING = 1;
//     NOT_SERVING = 2;
//     SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
//   }
//   ServingStatus status = 1;
// }

message HealthCheckResponse {
  string status = 1;
}

message HealthAddRequest {
  string service = 1;
  string status = 2;
}

message HealthListResponse {
  repeated string list = 1 [json_name = "list"];
  int64 total = 2 [json_name = "total"];
}

service Health {
  rpc Add(HealthAddRequest) returns (HealthCheckResponse);

  rpc List(google.protobuf.StringValue) returns (HealthListResponse){
    option (google.api.http) = {
      get: "/api/v1/health/list"
    };
  }

  // If the requested service is unknown, the call will fail with status
  // NOT_FOUND.
  rpc Check(google.protobuf.StringValue) returns (HealthCheckResponse){
    option (google.api.http) = {
      get: "/api/v1/health/check/{value}"
    };
  }

  // Performs a watch for the serving status of the requested service.
  // The server will immediately send back a message indicating the current
  // serving status.  It will then subsequently send a new message whenever
  // the service's serving status changes.
  //
  // If the requested service is unknown when the call is received, the
  // server will send a message setting the serving status to
  // SERVICE_UNKNOWN but will *not* terminate the call.  If at some
  // future point, the serving status of the service becomes known, the
  // server will send a new message with the service's serving status.
  //
  // If the call terminates with status UNIMPLEMENTED, then clients
  // should assume this method is not supported and should not retry the
  // call.  If the call terminates with any other status (including OK),
  // clients should retry the call with appropriate exponential backoff.
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}